EOL <- ';'

block <-
    '{'
    _ i:block_inner { $$ = i; } _
    '}' ~ { _cap_ERROR("block", "Expected closing '}' after block"); }

block_inner <-
    {
        cap_ps_push(auxil);
        auxil->stack->mark = BLOCK;
        auxil->stack->data = cst_ninit_Block(malloc(sizeof(struct cst_nBlock)), $0s, 0);
        _cap_ADDNODE(auxil->stack->data);
        $$ = _cap_LASTNODE;
    }
    line_inner*
    {
        assert(auxil->stack->mark == BLOCK);
        cst_NODEDOWNCAST(cap_ps_pop(auxil))->pos_end = $0e;
    }

line_inner <-
    s:body {
        cst_nBlock_addnode(auxil->stack->data, s);
    } / EOL

body <-
    ( ( n:block / n:block_statement ) _ EOL?
    / ( n:line_statement _ EOL ~ { _cap_ERROR("body", "Expected EOL ';' after line-statement"); }
      / n:expression _ EOL ~ { _cap_ERROR("body", "Expected EOL ';' after expression"); } ) )
    { $$ = n; }
