atom <- (n:float_literal / n:int_literal / n:char_literal / n:bool_literal / n:bytes_literal / n:string_literal / n:identifier)
        ~ { _cap_ERROR("atom", "Expected atom"); } { $$ = n; }

identifier <- < [a-zA-Z_][a-zA-Z_0-9]* > {
    _cap_ADDNODE(_cap_MKINITNODE(Identifier, _cap_COPYSTR($1)));
    $$ = _cap_LASTNODE;
}

bool_literal <-
    'TRUE' {
        _cap_ADDNODE(_cap_MKINITNODE(Bool, true));
        $$ = _cap_LASTNODE;
    }
  / 'FALSE' {
        _cap_ADDNODE(_cap_MKINITNODE(Bool, false));
        $$ = _cap_LASTNODE;
    }

int_literal <-
    '0x' < [a-fA-F][a-fA-F_]* > ~ { _cap_ERROR("int_literal", "Expected hex digits after '0x'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(Integer, _cap_COPYSTR($1), 16));
        $$ = _cap_LASTNODE;
    }
  / '0b' < [01][01_]* > ~ { _cap_ERROR("int_literal", "Expected binary digits after '0b'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(Integer, _cap_COPYSTR($2), 2));
        $$ = _cap_LASTNODE;
    }
  / < [0-9][0-9_]* > {
        _cap_ADDNODE(_cap_MKINITNODE(Integer, _cap_COPYSTR($3), 10));
        $$ = _cap_LASTNODE;
    }

float_literal <-
    < [0-9][0-9_]* > '.' < [0-9]+ > ~ { _cap_ERROR("float_literal", "Digit required after '.'"); }
    ( [eE] < [+\-] ~ { _cap_ERROR("float_literal", "Sign required after exponent"); }
      [0-9]+ ~ { _cap_ERROR("float_literal", "Digit required after exponent sign"); } > )? {
        _cap_ADDNODE(_cap_MKINITNODE(Float, _cap_COPYSTR($1), _cap_COPYSTR($2), atoi($3)));
        $$ = _cap_LASTNODE;
    }

char_literal <-
    "'" <
        [^'\\] / ("\\" .)
    > ~ { _cap_ERROR("char_literal", "Malformed char literal"); }
    "'" ~ { _cap_ERROR("char_literal", "Expected ending \"'\" after char literal"); } {
        _cap_ADDNODE(_cap_MKINITNODE(Char, _cap_COPYSTR($1)));
        $$ = _cap_LASTNODE;
    }

bytes_literal <-
    'b'
    < 'r'? >
    (('"""'
     < (('\\' .) / ('"' '"'? !'"') / [^\\"])* ~ { _cap_ERROR("bytes_literal", "Malformed bytes literal"); } >
     '"""' ~ { _cap_ERROR("bytes_literal", "Expected ending '\"' after bytes literal"); }) {
        _cap_ADDNODE(_cap_MKINITNODE(Bytes, _cap_COPYSTR($2), _cap_COPYSTR($1)[0] == 'r'));
        $$ = _cap_LASTNODE;
    }
  / ('"'
     < ([^"\\] / ('\\' .))* ~ { _cap_ERROR("bytes_literal", "Malformed bytes literal"); } >
     '"' ~ { _cap_ERROR("bytes_literal", "Expected ending '\"' after bytes literal"); }) {
        _cap_ADDNODE(_cap_MKINITNODE(Bytes, _cap_COPYSTR($3), _cap_COPYSTR($1)[0] == 'r'));
        $$ = _cap_LASTNODE;
    })

string_literal <-
    < 'r'? >
    (('"""'
     < (('\\' .) / ('"' '"'? !'"') / [^\\"])* ~ { _cap_ERROR("string_literal", "Malformed string literal"); } >
     '"""' ~ { _cap_ERROR("string_literal", "Expected ending '\"' after string literal"); }) {
        _cap_ADDNODE(_cap_MKINITNODE(String, _cap_COPYSTR($2), _cap_COPYSTR($1)[0] == 'r'));
        $$ = _cap_LASTNODE;
    }
  / ('"'
     < ([^"\\] / ('\\' .))* ~ { _cap_ERROR("string_literal", "Malformed string literal"); } >
     '"' ~ { _cap_ERROR("string_literal", "Expected ending '\"' after string literal"); }) {
        _cap_ADDNODE(_cap_MKINITNODE(String, _cap_COPYSTR($3), _cap_COPYSTR($1)[0] == 'r'));
        $$ = _cap_LASTNODE;
    })
