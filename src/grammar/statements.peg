line_statement <-
    illegal_stmt
  / s:dowhile_stmt { $$ = s; }
  / s:pass_stmt { $$ = s; }
  / s:flowctl_stmt { $$ = s; }
  / s:declare_stmt { $$ = s; }
  / s:assign_stmt { $$ = s; }

block_statement <-
    illegal_stmt
  / s:if_stmt { $$ = s; }
  / s:for_stmt { $$ = s; }
  / s:while_stmt { $$ = s; }
  / s:proc_stmt { $$ = s; }

illegal_stmt <-
    ELIF_KW { _cap_ERROR("statement", "Unexpected 'elif'"); }
  / ELSE_KW { _cap_ERROR("statement", "Unexpected 'else'"); }


if_stmt <-
    IF_KW _ c:expression _ b:body
    _ ( n:elif_stmt / n:else_stmt ) {
        _cap_ADDNODE(_cap_MKINITNODE(IfStmt, c, b, n));
        $$ = _cap_LASTNODE;
    }
elif_stmt <-
    ELIF_KW _ c:expression _ b:body
    _ ( n:elif_stmt / n:else_stmt ) {
        _cap_ADDNODE(_cap_MKINITNODE(ElIfStmt, c, b, n));
        $$ = _cap_LASTNODE;
    }
else_stmt <-
    ELSE_KW _ b:body {
        _cap_ADDNODE(_cap_MKINITNODE(ElseStmt, b));
        $$ = _cap_LASTNODE;
    }

for_stmt <-
    FOR_KW _ '(' ~ { _cap_ERROR("for_stmt", "Expected '(' after 'for'"); }
    _ ( init:line_statement / init:expression )? ~ { _cap_ERROR("for_stmt", "Expected expression or line-statement after '(' as for initialization part"); }
    _ EOL ~ { _cap_ERROR("for_stmt", "Expected EOL ';' after for initialization part"); }
    _ cond:expression? ~ { _cap_ERROR("for_stmt", "Expected expression as for condition part"); }
    _ EOL ~ { _cap_ERROR("for_stmt", "Expected EOL ';' after for condition part"); }
    _ ( iter:line_statement / iter:expression )? ~ { _cap_ERROR("for_stmt", "Expected expression or line-statement as for iteration part"); }
    _ EOL?
    _ ')' ~ { _cap_ERROR("for_stmt", "Expected closing ')'"); }
    _ ( body:body / EOL ) ~ { _cap_ERROR("for_stmt", "Expected for body or EOL ';'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(ForStmt, init, cond, iter, body));
        $$ = _cap_LASTNODE;
    }

while_stmt <-
    c:while_cond _ ( b:body / EOL ) ~ { _cap_ERROR("while_stmt", "Expected while body or EOL ';'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(WhileStmt, c, b, false));
        $$ = _cap_LASTNODE;
    }

dowhile_stmt <-
    DO_KW _ b:body ~ { _cap_ERROR("dowhile_stmt", "Expected do-while body after 'do'"); }
    _ c:while_cond ~ { _cap_ERROR("dowhile_stmt", "Expected 'while'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(WhileStmt, c, b, true));
        $$ = _cap_LASTNODE;
    }

while_cond <-
    WHILE_KW _ c:expression ~ { _cap_ERROR("while_cond", "Expected expression after 'while'"); } { $$ = c; }


pass_stmt <- PASS_KW {
    _cap_ADDNODE(cst_ninit_PassStmt(_cap_MKNODE(PassStmt), $0s, $0e));
    $$ = _cap_LASTNODE;
}

flowctl_stmt <-
    BREAK_KW {
        _cap_ADDNODE(_cap_MKINITNODE(FlowControlStmt, BREAK));
        $$ = _cap_LASTNODE;
    }
  / CONTINUE_KW {
        _cap_ADDNODE(_cap_MKINITNODE(FlowControlStmt, CONTINUE));
        $$ = _cap_LASTNODE;
    }


declare_stmt <-
    t:type _ n:identifier
    ( _ '=' _ v:expression ~ { _cap_ERROR("declare_stmt", "Expected expression after '='"); } )? {
        _cap_ADDNODE(_cap_MKINITNODE(Declaration, t, n, v));
        $$ = _cap_LASTNODE;
    }

assign_stmt <-
    ( t:identifier / t:attr_access / t:subscript_access )
    _ '=' _ v:expression ~ { _cap_ERROR("assign_stmt", "Expected expression after '='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(Assignment, t, v));
        $$ = _cap_LASTNODE;
    }
