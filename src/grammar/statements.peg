line_statement <- illegal_stmt

block_statement <-
    illegal_stmt
  / s:if_stmt { $$ = s; }
  / s:for_stmt { $$ = s; }

illegal_stmt <-
    'elif' { _cap_ERROR("statement", "Unexpected 'elif'"); }
  / 'else' { _cap_ERROR("statement", "Unexpected 'else'"); }


if_stmt <-
    'if' _ c:expression _ b:body
    _ ( n:elif_stmt / n:else_stmt ) {
        _cap_ADDNODE(_cap_MKINITNODE(IfStmt, c, b, n));
        $$ = _cap_LASTNODE;
    }
elif_stmt <-
    'elif' _ c:expression _ b:body
    _ ( n:elif_stmt / n:else_stmt ) {
        _cap_ADDNODE(_cap_MKINITNODE(ElIfStmt, c, b, n));
        $$ = _cap_LASTNODE;
    }
else_stmt <-
    'else' _ b:body {
        _cap_ADDNODE(_cap_MKINITNODE(ElseStmt, b));
        $$ = _cap_LASTNODE;
    }

for_stmt <-
    'for' _ '(' ~ { _cap_ERROR("for_stmt", "Expected '(' after 'for'"); }
    _ ( init:line_statement / init:expression )? ~ { _cap_ERROR("for_stmt", "Expected expression or line-statement after '(' as for initialization part"); }
    _ EOL ~ { _cap_ERROR("for_stmt", "Expected EOL ';' after for initialization part"); }
    _ cond:expression? ~ { _cap_ERROR("for_stmt", "Expected expression as for condition part"); }
    _ EOL ~ { _cap_ERROR("for_stmt", "Expected EOL ';' after for condition part"); }
    _ ( iter:line_statement / iter:expression )? ~ { _cap_ERROR("for_stmt", "Expected expression or line-statement as for iteration part"); }
    _ EOL?
    _ ')' ~ { _cap_ERROR("for_stmt", "Expected closing ')'"); }
    _ body:body ~ { _cap_ERROR("for_stmt", "Expected for body"); } {
        _cap_ADDNODE(_cap_MKINITNODE(ForStmt, init, cond, iter, body));
        $$ = _cap_LASTNODE;
    }
