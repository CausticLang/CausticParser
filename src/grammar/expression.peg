expression <- n:ternary { $$ = n; }

ternary <-
    c:disjunction _ '?' _
    t:disjunction ~ { _cap_ERROR("ternary", "Expected expression after '\?'"); } _
    ':' ~ { _cap_ERROR("ternary", "':' expected"); } _
    f:ternary ~ { _cap_ERROR("ternary", "Expected expression after ':'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(TernaryOp, CONDITIONAL, c, t, f));
        $$ = _cap_LASTNODE;
    }
  / n:disjunction { $$ = n; }

disjunction <-
    l:disjunction _ '||' _ r:xdisjunction ~ { _cap_ERROR("disjunction", "Expected expression after '||'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LOGOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:disjunction _ '??' _ r:xdisjunction ~ { _cap_ERROR("disjunction", "Expected expression after '\?\?'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, NULLCOALESCING, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:xdisjunction { $$ = n; }
xdisjunction <-
    l:xdisjunction _ '^^' _ r:conjunction ~ { _cap_ERROR("xdisjunction", "Expected expression after '^^'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LOGXOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:conjunction { $$ = n; }
conjunction <-
    l:conjunction _ '&&' _ r:bitxor ~ { _cap_ERROR("conjunction", "Expected expression after '&&'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LOGAND, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitxor { $$ = n; }

bitxor <-
    l:bitxor _ '^' !'^' _ r:bitor ~ { _cap_ERROR("bitxor", "Expected expression after '^'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, BITXOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitor { $$ = n; }
bitor <-
    l:bitor _ '|' !'|' _ r:bitand ~ { _cap_ERROR("bitor", "Expected expression after '|'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, BITOR, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:bitand { $$ = n; }
bitand <-
    l:bitand _ '&' !'&' _ r:comparison ~ { _cap_ERROR("bitand", "Expected expression after '&'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, BITAND, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:comparison { $$ = n; }

comparison <-
    l:comparison _ '==' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '=='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, EQ, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:comparison _ '!=' _ r:inequality ~ { _cap_ERROR("comparison", "Expected expression after '!='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, NE, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:inequality { $$ = n; }
inequality <-
    l:inequality _ '<=' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '<='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LE, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '>=' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '>='"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, GE, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '<' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '<'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:inequality _ '>' _ r:shift ~ { _cap_ERROR("inequality", "Expected expression after '>'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, GT, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:shift { $$ = n; }

shift <-
    l:shift _ '<<' _ r:sum ~ { _cap_ERROR("shift", "Expected expression after '<<'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, LSHIFT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:shift _ '>>' _ r:sum ~ { _cap_ERROR("shift", "Expected expression after '>>'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, RSHIFT, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:sum { $$ = n; }

sum <-
    l:sum _ '+' _ r:factor ~ { _cap_ERROR("sum", "Expected expression after '+'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, ADD, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:sum _ '-' _ r:factor ~ { _cap_ERROR("sum", "Expected expression after '-'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, SUB, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:factor { $$ = n; }

factor <-
    l:factor _ '*' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '*'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, MULT, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '@' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '@'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, MMUL, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '/' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '/'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, DIV, l, r));
        $$ = _cap_LASTNODE;
    }
  / l:factor _ '%' _ r:exp ~ { _cap_ERROR("factor", "Expected expression after '%'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, MOD, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:exp { $$ = n; }

exp <-
    l:prefix _ '**' _ r:postfix ~ { _cap_ERROR("exp", "Expected expression after '**'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(BinaryOp, POW, l, r));
        $$ = _cap_LASTNODE;
    }
  / n:prefix { $$ = n; }

prefix <-
    '+' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '+'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, POS, t));
        $$ = _cap_LASTNODE;
    }
  / '-' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '-'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, NEG, t));
        $$ = _cap_LASTNODE;
    }
  / '!' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '!'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, LOGINV, t));
        $$ = _cap_LASTNODE;
    }
  / '~' t:prefix ~ { _cap_ERROR("prefix", "Expected expression after unary '~'"); } {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, BITINV, t));
        $$ = _cap_LASTNODE;
    }
  / n:postfix { $$ = n; }
postfix <-
    t:postfix '++' {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, INC, t));
        $$ = _cap_LASTNODE;
    }
  / t:postfix '--' {
        _cap_ADDNODE(_cap_MKINITNODE(UnaryOp, DEC, t));
        $$ = _cap_LASTNODE;
    }
  / n:invokation { $$ = n; }

invokation <- n:invoke { $$ = n; }
            / n:binding { $$ = n; }

binding <-
    '(' t:expression ')' ~ { _cap_ERROR("binding", "Expected closing ')'"); } { $$ = t; }
  / n:atom { $$ = n; }
