proc_expr <-
    PROC_KW
    _ '<' ~ { _cap_ERROR("proc_expr", "Expected '<' after 'proc'"); }
    _ t:type ~ { _cap_ERROR("proc_expr", "Expected type after '<'"); }
    _ '>' ~ { _cap_ERROR("proc_expr", "Expected closing '>'"); }
    {
        cap_ps_push(auxil);
        auxil->stack->mark = PROC_PARAMS;
        auxil->stack->data = cst_ninit_ProcExpr((struct cst_nProcExpr*)malloc(sizeof(struct cst_nProcExpr)), $0s, $0e, cap_lno(auxil), cap_cno(auxil, $0s), t, NULL, 0, 0);
    }
    _ '(' _ proc_params? _ ')' ~ { _cap_ERROR("proc_expr", "Expected closing ')'"); }
    _ b:body ~ { _cap_ERROR("proc_expr", "Body is required for procedure expressions"); } {
        struct cst_nProcExpr* pexpr = cap_ps_pop(auxil);
        pexpr->body = b;
        _cap_ADDNODE(pexpr);
        $$ = _cap_LASTNODE;
    }

proc_stmt <-
    PROC_KW _
    ( '<' _ t:type ~ { _cap_ERROR("proc_stmt", "Expected type after '<'"); }
      _ '>' ~ { _cap_ERROR("proc_stmt", "Expected closing '>'"); }
    / t:type ) ~ { _cap_ERROR("proc_stmt", "Expected type or '<' for procedure statement type"); }
    _ n:identifier ~ { _cap_ERROR("proc_stmt", "Expected identifier after procedure statement type"); }
    {
        cap_ps_push(auxil);
        auxil->stack->mark = PROC_PARAMS;
        auxil->stack->data = cst_ninit_ProcStmt((struct cst_nProcStmt*)malloc(sizeof(struct cst_nProcStmt)), $0s, $0e, cap_lno(auxil), cap_cno(auxil, $0s), n, t, NULL, 0, 0);
    }
    _ '(' _ proc_params? _ ')' ~ { _cap_ERROR("proc_stmt", "Expected closing ')'"); }
    _ b:body? {
        struct cst_nProcStmt* pstmt = cap_ps_pop(auxil);
        pstmt->body = b;
        _cap_ADDNODE(pstmt);
        $$ = _cap_LASTNODE;
    }

proc_params <-
    !'/' ~ { _cap_ERROR("proc_params", "Pos-only mark '/' must be preceded by parameters"); }
    ( proc_posonly_params _ ( ',' _ proc_posorkw_params )? ( ',' _ proc_kwonly_params )? _ ','?
    / proc_posorkw_params _ ( ',' _ proc_kwonly_params )? _ ','?
    / proc_kwonly_params _ ','? )

proc_posonly_params <-
    ( proc_posonly_param _ ',' )+ '/'

proc_posorkw_params <-
    proc_posorkw_param ( _ ',' _ proc_posorkw_param )*

proc_kwonly_params <-
    '*' _ ',' ~ { _cap_ERROR("proc_kwonly_params", "Expected ',' after '*'"); }
    proc_posorkw_param ~ { _cap_ERROR("proc_kwonly_params", "Expected parameter after ','"); }
    ( _ ',' _ proc_posorkw_param )*


proc_posonly_param <-
    t:type _ n:identifier ~ { _cap_ERROR("proc_posonly_param", "Expected identifier"); }
    ( _ '=' _ d:expression ~ { _cap_ERROR("proc_posonly_param", "Expected expression after '='"); } {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), POS_ONLY, t, n, true, d); }
    / {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), POS_ONLY, t, n, false, 0);
      } )
proc_posorkw_param <-
    t:type _ n:identifier ~ { _cap_ERROR("proc_posorkw_param", "Expected identifier"); }
    ( _ '=' _ d:expression ~ { _cap_ERROR("proc_posorkw_param", "Expected expression after '='"); } {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), POS_OR_KW, t, n, true, d); }
    / {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), POS_OR_KW, t, n, false, 0);
      } )
proc_kwonly_param <-
    t:type _ n:identifier ~ { _cap_ERROR("proc_kwonly_param", "Expected identifier"); }
    ( _ '=' _ d:expression ~ { _cap_ERROR("proc_kwonly_param", "Expected expression after '='"); } {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), KW_ONLY, t, n, true, d); }
    / {
        assert(auxil->stack->mark == PROC_PARAMS);
        cst_PROC_ADD_PARAM((struct cst_nProcExpr*)(auxil->stack->data), KW_ONLY, t, n, false, 0);
      } )
